import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ info.json
with open("info.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.effective_user.id] = {}
    authors = list(data.keys())
    keyboard = [[author] for author in authors]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî –±–æ—Ç –ø–æ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ XIX –≤–µ–∫–∞.\n\n"
        "üìñ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Äî —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –≤–µ–ª–∏–∫–∏—Ö –ø–∏—Å–∞—Ç–µ–ª—è—Ö\n"
        "‚Äî –¥–µ–ª–∏—Ç—å—Å—è –∫—Ä–∞—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π\n"
        "‚Äî –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        "üëâ –ù–∞—á–Ω—ë–º? –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å–∞—Ç–µ–ª—è:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    state = user_state.get(user_id, {})

    # –í—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–∞
    if text in data:
        user_state[user_id] = {"author": text}
        bio = data[text]["bio"]
        works = list(data[text]["works"].keys())
        keyboard = [[work] for work in works]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f"‚úíÔ∏è {text}\n{bio}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:", reply_markup=reply_markup)
        return

    # –í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if "author" in state and text in data[state["author"]]["works"]:
        user_state[user_id]["work"] = text
        summary = data[state["author"]]["works"][text]["summary"]
        user_state[user_id]["quiz"] = data[state["author"]]["works"][text]["questions"]
        user_state[user_id]["q_index"] = 0
        user_state[user_id]["score"] = 0
        reply_markup = ReplyKeyboardMarkup([["‚úÖ –Ø –∏–∑—É—á–∏–ª(–∞), –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É"]], resize_keyboard=True)
        await update.message.reply_text(f"üìò {text}\n\n{summary}", reply_markup=reply_markup)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç—É
    if text.startswith("‚úÖ –Ø –∏–∑—É—á–∏–ª"):
        await send_question(update, user_id)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if "quiz" in state:
        current_q = state["quiz"][state["q_index"] - 1]
        correct = current_q["answer"]
        if text == correct:
            user_state[user_id]["score"] += 1
            await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")

        if state["q_index"] < len(state["quiz"]):
            await send_question(update, user_id)
        else:
            total = len(state["quiz"])
            score = state["score"]
            keyboard = [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∏—Å–∞—Ç–µ–ª–µ–π"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                f"üßæ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç!\nüéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total} –≤–µ—Ä–Ω–æ.",
                reply_markup=reply_markup
            )
            user_state[user_id] = {}
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –≤—ã—Ö–æ–¥
    if text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∏—Å–∞—Ç–µ–ª–µ–π":
        return await start(update, context)


    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é.")

async def send_question(update: Update, user_id):
    state = user_state[user_id]
    question_data = state["quiz"][state["q_index"]]
    state["q_index"] += 1

    keyboard = [[option] for option in question_data["options"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(f"‚ùì –í–æ–ø—Ä–æ—Å {state['q_index']} –∏–∑ {len(state['quiz'])}\n{question_data['question']}", reply_markup=reply_markup)

def main():
    app = ApplicationBuilder().token("7589109384:AAFKf4Ca8OFvYSwzeQqTUqEt6AMwWTQmldM").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
